mixin Class AmmoPickupMessage
{
	Default	{ Scale 0.75; }
	Override String PickupMessage()
	{
		double factor = G_SkillPropertyFloat(SKILLP_AmmoFactor) * (bDROPPED ? - G_SkillPropertyFloat(SKILLP_DropAmmoFactor) : 1);
		int result = int(Amount * factor);
		if(result == 1) return String.Format("+%d %s",result,GetTag());
		else return String.Format("+%d %ss",result,GetTag());	
	}
}

Class Ammo9mm : Ammo
{
	mixin AmmoPickupMessage;
	Default
	{
		Tag "$TAG_AMMO_9MM";
		Inventory.Icon "9MM_A0";
		Inventory.MaxAmount 240;
		Ammo.BackpackAmount 8;
		Ammo.BackpackMaxAmount 480;
	}
}

Class Ammo9mm_1 : Ammo9mm
{
	Default	{ Inventory.PickupSound "misc/ammo_pkup_mag"; }
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		bSPRITEFLIP = Random(0,1);
		Amount = Random[Ammo9mm](1,8);

		double factor = G_SkillPropertyFloat(SKILLP_AmmoFactor) * (bDROPPED ? - G_SkillPropertyFloat(SKILLP_DropAmmoFactor) : 1);
		int result = int(Amount * factor);
		If(result > 8 && G_SkillPropertyFloat(SKILLP_AmmoFactor) > 1) { bSPRITEFLIP = False; SetState(ResolveState("Spawn")+2); }

		If(bTOSSED && Random(0,1)) { A_DropItem("AmmoGranate",1,16); A_DropItem("AmmoTNT",1,4); }
		Else If(!bTOSSED && Random(0,1)) { A_SpawnItemEx("AmmoGranate",Random(-8,8),Random(-8,8),failchance: 240); A_SpawnItemEx("AmmoTNT",Random(-8,8),Random(-8,8),failchance: 252); }
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay;
		9MM_ AB -1;
		Stop;
	}
}
Class Ammo9mm_2 : Ammo9mm
{
	Default	{ Inventory.PickupSound "misc/ammo_pkup_box"; }
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		bSPRITEFLIP = Random(0,1);
		Amount = Random[Ammo9mm](8,16);

		double factor = G_SkillPropertyFloat(SKILLP_AmmoFactor) * (bDROPPED ? -G_SkillPropertyFloat(SKILLP_DropAmmoFactor) : 1);
		int result = int(Amount * factor);
		If(result > 16 && G_SkillPropertyFloat(SKILLP_AmmoFactor) > 1) { bSPRITEFLIP = False; SetState(ResolveState("Spawn")+2); }

		If(bTOSSED && Random(0,1)) { A_DropItem("AmmoGranate",1,16); A_DropItem("AmmoTNT",1,4); }
		Else If(!bTOSSED && Random(0,1)) { A_SpawnItemEx("AmmoGranate",Random(-8,8),Random(-8,8),failchance: 240); A_SpawnItemEx("AmmoTNT",Random(-8,8),Random(-8,8),failchance: 252); }
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay;
		9MM_ BC -1;
		Stop;
	}
}
Class Ammo9mm_3 : Ammo9mm
{
	Default	{ Inventory.PickupSound "misc/ammo_pkup_mag"; XScale 0.65; }
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		bSPRITEFLIP = Random(0,1);
		Amount = Random[Ammo9mm](8,32);

		double factor = G_SkillPropertyFloat(SKILLP_AmmoFactor) * (bDROPPED ? -G_SkillPropertyFloat(SKILLP_DropAmmoFactor) : 1);
		int result = int(Amount * factor);
		If(result > 32 && G_SkillPropertyFloat(SKILLP_AmmoFactor) > 1) { bSPRITEFLIP = False; SetState(ResolveState("Spawn")+2); }

		If(bTOSSED && Random(0,1)) { A_DropItem("AmmoGranate",1,16); A_DropItem("AmmoTNT",1,4); }
		Else If(!bTOSSED && Random(0,1)) { A_SpawnItemEx("AmmoGranate",Random(-8,8),Random(-8,8),failchance: 240); A_SpawnItemEx("AmmoTNT",Random(-8,8),Random(-8,8),failchance: 252); }
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay;
		9MM_ CD -1;
		Stop;
	}
}

Class Ammo12G : Ammo
{
	mixin AmmoPickupMessage;
	Default	
	{
		Tag "$TAG_AMMO_12GA";
		Inventory.Icon "12G_A0";
		Inventory.MaxAmount 32;
		Ammo.BackpackAmount 4;
		Ammo.BackpackMaxAmount 64;
	}
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		If(bTOSSED && Random(0,1)) { A_DropItem("AmmoGranate",1,16); A_DropItem("AmmoTNT",1,4); }
		Else If(!bTOSSED && Random(0,1)) { A_SpawnItemEx("AmmoGranate",Random(-8,8),Random(-8,8),failchance: 240); A_SpawnItemEx("AmmoTNT",Random(-8,8),Random(-8,8),failchance: 252); }
	}
}
Class Ammo12G_1 : Ammo12G
{
	Default	{ Inventory.PickupSound "misc/ammo_pkup_shell"; }
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		bSPRITEFLIP = Random(0,1);
		// variants
		int dec = Random[Ammo12G](0,3);
		switch(dec)
		{
		case 0:
		default:
			SetState(ResolveState("Spawn"));
			Amount = 4;
			break;
		case 1:
			SetState(ResolveState("Spawn")+2);
			Amount = 3;
			break;
		case 2:
			SetState(ResolveState("Spawn")+3);
			Amount = 2;
			break;
		case 3:
			SetState(ResolveState("Spawn")+4);
			Amount = 1;
			break;
		}
		double factor = G_SkillPropertyFloat(SKILLP_AmmoFactor) * (bDROPPED ? -G_SkillPropertyFloat(SKILLP_DropAmmoFactor) : 1);
		int result = int(Amount * factor);
		If(result == 2 && G_SkillPropertyFloat(SKILLP_AmmoFactor) > 1) { SetState(ResolveState("Spawn")+3); }
		Else If(result == 4 && G_SkillPropertyFloat(SKILLP_AmmoFactor) > 1) { SetState(ResolveState("Spawn")); }
		Else If(result > 4 && G_SkillPropertyFloat(SKILLP_AmmoFactor) > 1) { bSPRITEFLIP = False; SetState(ResolveState("Spawn")+5); }
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay;
		12G_ ABCDE -1;
		Stop;
	}
}
Class Ammo12G_2 : Ammo12G
{
	Default	{ Inventory.PickupSound "misc/ammo_pkup_box"; }
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Amount = Random[Ammo12G](6,12);
	}
	States
	{
	Spawn:
		12G_ E -1;
		Stop;
	}
}

Class Ammo792M : Ammo
{
	mixin AmmoPickupMessage;
	Default
	{
		Tag "$TAG_AMMO_792M";
		Inventory.Icon "792MA0";
		Inventory.MaxAmount 40;
		Ammo.BackpackAmount 5;
		Ammo.BackpackMaxAmount 100;
		Scale 1.2;
	}
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		If(bTOSSED && Random(0,1)) { A_DropItem("AmmoGranate",1,16); A_DropItem("AmmoTNT",1,4); A_DropItem("AmmoRifleGrenade",1,256); }
		Else If(!bTOSSED && Random(0,1))
		{ 
			A_SpawnItemEx("AmmoGranate",Random(-8,8),Random(-8,8),failchance: 240);
			A_SpawnItemEx("AmmoTNT",Random(-8,8),Random(-8,8),failchance: 252);
			A_SpawnItemEx("AmmoRifleGrenade",Random(-8,8),Random(-8,8));
		}
	}
}
Class Ammo792M_1 : Ammo792M
{
	Default	{ Inventory.PickupSound "misc/ammo_pkup_clip"; Scale 1.0; }
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		bSPRITEFLIP = Random(0,1);
		// variants
		int dec = Random[Ammo12G](0,4);
		switch(dec)
		{
		case 0:
		default:
			SetState(ResolveState("Spawn"));
			Amount = 5;
			break;
		case 1:
			SetState(ResolveState("Spawn")+2);
			Amount = 4;
			break;
		case 2:
			SetState(ResolveState("Spawn")+3);
			Amount = 3;
			break;
		case 3:
			SetState(ResolveState("Spawn")+4);
			Amount = 2;
			break;
		case 4:
			SetState(ResolveState("Spawn")+5);
			Amount = 1;
			break;
		}
		double factor = G_SkillPropertyFloat(SKILLP_AmmoFactor) * (bDROPPED ? -G_SkillPropertyFloat(SKILLP_DropAmmoFactor) : 1);
		int result = int(Amount * factor);
		If(result == 2 && G_SkillPropertyFloat(SKILLP_AmmoFactor) > 1) { SetState(ResolveState("Spawn")+4); }
		Else If(result == 4 && G_SkillPropertyFloat(SKILLP_AmmoFactor) > 1) { SetState(ResolveState("Spawn")+2); }
		Else If(result > 4 && G_SkillPropertyFloat(SKILLP_AmmoFactor) > 1) { bSPRITEFLIP = False; SetState(ResolveState("Spawn")+6); }
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay;
		792M ABCDEF -1;
		Stop;
	}
}
Class Ammo792M_2 : Ammo792M
{
	Default	{ Inventory.PickupSound "misc/ammo_pkup_box"; }
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		bSPRITEFLIP = Random(0,1);
		Amount = Random[Ammo792M](5,15);
	}
	States
	{
	Spawn:
		792M F -1;
		Stop;
	}
}

Class Ammo9362 : Ammo
{
	mixin AmmoPickupMessage;
	Default
	{
		Tag "$TAG_AMMO_9362";
		Inventory.Icon "9362A0";
		Inventory.MaxAmount 250;
		Ammo.BackpackMaxAmount 250;
	}
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		If(bTOSSED && Random(0,1)) { A_DropItem("AmmoGranate",1,16); A_DropItem("AmmoTNT",1,4); }
		Else If(!bTOSSED && Random(0,1)) { A_SpawnItemEx("AmmoGranate",Random(-8,8),Random(-8,8),failchance: 240); A_SpawnItemEx("AmmoTNT",Random(-8,8),Random(-8,8),failchance: 252); }
	}
}
Class Ammo9362_1 : Ammo9362 replaces Cell
{
	Default	{ Inventory.PickupSound "misc/ammo_pkup_box"; }
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		bSPRITEFLIP = Random(0,1);
		Amount = Random[Ammo9362](50,200);
	}
	States
	{
	Spawn:
		9362 A -1;
		Stop;
	}
}

Class AmmoFuel : Ammo
{
	mixin AmmoPickupMessage;
	Default
	{
		Tag "$TAG_AMMO_FUEL";
		Inventory.Icon "FUELA0";
		Inventory.MaxAmount 150;
		Ammo.BackpackMaxAmount 150;
	}
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		If(bTOSSED && Random(0,1)) { A_DropItem("AmmoGranate",1,16); A_DropItem("AmmoTNT",1,4); }
		Else If(!bTOSSED && Random(0,1)) { A_SpawnItemEx("AmmoGranate",Random(-8,8),Random(-8,8),failchance: 240); A_SpawnItemEx("AmmoTNT",Random(-8,8),Random(-8,8),failchance: 252); }
	}
}
Class AmmoFuel_1 : AmmoFuel
{
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		bSPRITEFLIP = Random(0,1);
		Amount = Random[AmmoFuel](25,100);
		frame = random[Medium_HealthPack](0,1); //A,B
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay;
		FUEL # -1;
		Stop;
	}
}

Class AmmoRifleGrenade : Ammo
{
	Default
	{
		Tag "$TAG_AMMO_RIFLEGRENADE";
		Inventory.Icon "R_G_A0";
		Inventory.Amount 1;
		Inventory.MaxAmount 10;
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount 15;
		Ammo.DropAmount 1;
		Scale 0.75;
		+INVENTORY.IGNORESKILL
	}
	Override String PickupMessage()	{ return String.Format("+%d %s",Amount,GetTag()); }
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		bSPRITEFLIP = Random(0,1);
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay;
		R_G_ A -1;
		Stop;
	}
}

Class AmmoTNT : Ammo
{
	int counter, delay_tc, delay_ac;
	Default
	{
		Tag "$TAG_AMMO_TNT";
		Inventory.Icon "TNT_A0";
		Inventory.Amount 1;
		Inventory.MaxAmount 5;
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount 5;
		Ammo.DropAmount 1;
		Scale 1.0;
		+INVENTORY.IGNORESKILL
	}
	Override String PickupMessage()	{ return String.Format("+%d %s",Amount,GetTag()); }
	Override Void PostBeginPlay()
	{
		counter = 5;
		Super.PostBeginPlay();
		bSPRITEFLIP = Random(0,1);
	}
    Override void DoEffect()
    {
        Super.DoEffect();
        If(Owner is "PlayerPawn" && Owner.GetPlayerInput(MODINPUT_BUTTONS) & BT_USER2 && delay_tc == 0)
		{
			If(counter == 45) { counter = 5; }
			Else { counter += 5; }
				delay_tc = 10;
		}
    }
	Override Bool Use(bool pickup)
	{
		If(Owner && Self.Amount > 0 && delay_ac == 0)
		{
			String act = "Dynamite_Thrown_" .. counter;

			Owner.A_SpawnProjectile(act, 32, 0, 0, CMF_AIMDIRECTION, Owner.Pitch-16.0);

			delay_ac = 20;
			Self.Amount --;
		}
		Return 0;
	}
	Override Void Tick()
	{
		Super.Tick();
		If(delay_tc > 0)	delay_tc--;
		If(delay_ac > 0)	delay_ac--;
	}
	States
	{
	Spawn:
		TNT_ A -1;
		Stop;
	}
}

Class AmmoGranate : Ammo
{
	bool shgmod;
	int delay_tc, delay_ac;
	Default
	{
		Tag "$TAG_AMMO_GRANATE";
		Inventory.Icon "SHG_A0";
		Inventory.Amount 1;
		Inventory.MaxAmount 10;
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount 15;
		Ammo.DropAmount 1;
		Scale 0.75;
		+INVENTORY.IGNORESKILL
	}
	Override String PickupMessage()	{ return String.Format("+%d %s",Amount,GetTag()); }
	Override Void PostBeginPlay()
	{
		shgmod = False;
		Super.PostBeginPlay();
		bSPRITEFLIP = Random(0,1);
	}
    Override void DoEffect()
    {
        Super.DoEffect();
        If(Owner is "PlayerPawn" && Owner.GetPlayerInput(MODINPUT_BUTTONS) & BT_USER1 && delay_tc == 0)
        {
			If(shgmod == True) { shgmod = False; }
			Else If(shgmod == False && Self.Amount >= 5) { shgmod = True; }
			Else { shgmod = False; }
				delay_tc = 10;
		}
    }
	Override Bool Use(bool pickup)
	{
		If(Owner && Self.Amount > 0 && delay_ac == 0)
		{
			If(shgmod == True && Self.Amount >= 5)
			{
				Owner.A_SpawnProjectile("Granate_Thrown_B",32,0,0,CMF_AIMDIRECTION,Owner.Pitch-16.0);
				Self.Amount -= 5;
			}
			Else
			{ 
				shgmod = False;
				Owner.A_SpawnProjectile("Granate_Thrown_A",32,0,0,CMF_AIMDIRECTION,Owner.Pitch-16.0);
				Self.Amount --;
			}
			delay_ac = 20;
		}
		Return 0;
	}
	Override Void Tick()
	{
		Super.Tick();
		If(shgmod == True && Self.Amount < 5) { shgmod = False; }
		If(delay_tc > 0)	delay_tc--;
		If(delay_ac > 0)	delay_ac--;
	}
	States
	{
	Spawn:
		SHG_ A -1;
		Stop;
	}
}

Class AmmoPouches : BackpackItem
{
	Default	{ Inventory.PickupMessage "$PICKUP_AMMO_POUCHES"; }
	States
	{
	Spawn:
		AMM0 A -1;
		Stop;
	}
}
