/*
1938 Latour is a vintage wine bottle often found in wine stashes in secret areas in Return to Castle Wolfenstein.
It holds up to three gulps of wine, each one worth 25 health points.
*/
Class Health_1938_Latour : HealthPickup
{
	Default
	{
		Health 25;
		+INVENTORY.INVBAR
		Inventory.Amount 3;
		Inventory.MaxAmount 3;
		Inventory.InterHubAmount 3;
		Inventory.Icon "HEALK0";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "$TAG_1938_LATOUR";
		Tag "$TAG_1938_LATOUR";
		HealthPickup.AutoUse 1;
		Scale 0.6;
	}
	States
	{
	Spawn:
		HEAL K -1;
		Stop;
	}
}

Class Small_HealthPack : Health
{
	Default
	{
		-INVENTORY.ALWAYSPICKUP
		Inventory.MaxAmount 999;
		Inventory.PickupMessage "$PICKUP_HEALTH_S";
		Inventory.PickupSound "misc/health_pkup";
	}
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();

		Int sk = G_SkillPropertyInt(SKILLP_ACSReturn);
		If(sk == 0 || sk == 4) { Amount = 10; }
		Else { Amount = 5; }

		frame = random[Small_HealthPack](6,9); //G,H,I,J
	}
	States
	{
	Spawn:
		HEAL # -1;
		Stop;
	}
}

Class Medium_HealthPack : Health
{
	Default
	{
		Inventory.PickupMessage "$PICKUP_HEALTH_M";
		Inventory.PickupSound "misc/health_pkup";
	}
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();

		Int sk = G_SkillPropertyInt(SKILLP_ACSReturn);
		If(sk == 0 || sk == 4) { Amount = 25; }
		Else { Amount = 15; }

		frame = random[Medium_HealthPack](0,1); //A,B
	}
	Override Bool Used(Actor User)
	{	
		If(User && User.Player && User.Player.Health > 0 && CVar.FindCVar('Acid_Health').GetBool())
		{
			User.GiveBody(Amount, 999);
			User.A_StartSound("misc/health_pkup", CHAN_ITEM);
			Destroy();
		}
		Return Super.Used(User);
	}
    Override Bool TryPickup(in out Actor Toucher)
    {
		Int Hp;
		Int sk = G_SkillPropertyInt(SKILLP_ACSReturn);
		If(sk == 0 || sk == 4) { Hp = 75; }
		Else { Hp = 85; }
		
		If(Toucher.Health > Hp && Toucher.Health < 100)
		{ 
			Toucher.GiveBody(Amount, 999);
			GoAwayAndDie();
			Return True;
		}
		Return Super.TryPickup(toucher);
	}
	States
	{
	Spawn:
		HEAL # -1;
		Stop;
	}
}

Class Large_HealthPack : Health
{
	Default
	{
		Inventory.PickupMessage "$PICKUP_HEALTH_L";
		Inventory.PickupSound "misc/health_pkup";
	}
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();

		Int sk = G_SkillPropertyInt(SKILLP_ACSReturn);
		If(sk == 0 || sk == 4) { Amount = 50; }
		Else { Amount = 25; }

		frame = random[Large_HealthPack](2,5); //C,D,E,F
	}
	Override Bool Used(Actor User)
	{
		If(User && User.Player && User.Player.Health > 0 && CVar.FindCVar('Acid_Health').GetBool())
		{
			User.GiveBody(Amount, 999);
			User.A_StartSound("misc/health_pkup", CHAN_ITEM);
			Destroy();
		}
		Return Super.Used(User);
	}
    Override Bool TryPickup(in out Actor Toucher)
    {
		Int Hp;
		Int sk = G_SkillPropertyInt(SKILLP_ACSReturn);
		If(sk == 0 || sk == 4) { Hp = 50; }
		Else { Hp = 75; }
		
		If(Toucher.Health > Hp && Toucher.Health < 100)
		{ 
			Toucher.GiveBody(Amount, 999);
			GoAwayAndDie();
			Return True;
		}
		Return Super.TryPickup(toucher);
	}
	States
	{
	Spawn:
		HEAL # -1;
		Stop;
	}
}

Class Wolfenstein3D_DogFood : Health
{
	Default
	{
		Inventory.Amount 4;
		Inventory.PickupMessage "$PICKUP_HEALTH_DOGFOOD";
		Inventory.PickupSound "wolf_3d/food";
	}
	States
	{
	Spawn:
		HEAL L -1;
		Stop;
	}
}

Class Wolfenstein3D_Meal : Health
{
	Bool hotmeal;
	Default
	{
		Health 10;
		Inventory.Amount 10;
		Inventory.PickupMessage "$PICKUP_HEALTH_COLDMEAL";
		Inventory.PickupSound "wolf_3d/food";
		+VULNERABLE
		+NOTAUTOAIMED
		+NOBLOOD
		+DONTTHRUST
		DamageFactor "Fire", 2.0;
		DamageFactor "Normal", 0.0;
	}
	Override String PickupMessage()
	{
		If(hotmeal)
			return StringTable.Localize("$PICKUP_HEALTH_HOTMEAL");
		
		return Super.PickupMessage();
	}
	States
	{
	Spawn:
		HEAL M -1;
		Stop;
	Death.Fire:
		HEAL B 0
		{
			Amount = 25;
			hotmeal = True;
		}
		HEAL N 5 Bright A_SpawnItemEx("HotMeal_Smoke", FRandom(-5.0,5.0), FRandom(-5.0,5.0), 7.5+FRandom(-1.0,1.0), 0, 0, FRandom(0.3,0.7), 0, SXF_CLIENTSIDE, 0);
		Goto Death.Fire+1;
	}
}

Class HotMeal_Smoke : Actor
{
	Default
	{
		+NOBLOCKMAP +NOINTERACTION +FORCEXYBILLBOARD
		RenderStyle "Add";
	}
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();

		Gravity = frandom(0.05, 0.1);
		Alpha = frandom(0.7, 1.0);
		frame = random[HotMeal_Smoke](0, 3); //A,B,C,D
	}
	States
	{
	Spawn:
		SMOK # 0 NoDelay A_SetScale(frandom(0.1, 0.25));
		SMOK # 1 A_FadeOut(0.05);
		Wait;
	}
}

Class Wolfenstein3D_FirstAidKit : Health
{
	Default
	{
		Inventory.Amount 25;
		Inventory.PickupMessage "$PICKUP_HEALTH_FIRSTAIDKIT";
		Inventory.PickupSound "wolf_3d/medkit";
	}
	States
	{
	Spawn:
		HEAL O -1;
		Stop;
	}
}

Class Wolfenstein3D_Serum : Berserk
{
	Default
	{
		Inventory.PickupMessage "$PICKUP_HEALTH_SERUM";
		Inventory.PickupSound "wolf_3d/s_100";
	}
	States
	{
	Spawn:
		WSTR A -1;
		Stop;
	}
}
