Class WW2StatusBar : BaseStatusBar
{
    clearscope double LinearMap(double val, double source_min, double source_max, double out_min, double out_max, bool clampIt = false) 
    {
        double sourceDiff = (source_max - source_min);
        if (sourceDiff == 0)
            sourceDiff = 1;
        double d = (val - source_min) * (out_max - out_min) / sourceDiff + out_min;
        if (clampit) 
        {
            double truemax = out_max > out_min ? out_max : out_min;
            double truemin = out_max > out_min ? out_min : out_max;
            d = Clamp(d, truemin, truemax);
        }
        return d;
    }

	HUDFont mHUDFont;
	HUDFont mIndexFont;
	HUDFont mAmountFont;
	InventoryBarState diparms;

	HUDFont mSmallFont;
	HUDFont mNSmallFont;

	DynamicValueInterpolator mHeatInterpolator;
	DynamicValueInterpolator mHealthInterpolator;
	DynamicValueInterpolator mArmorInterpolator;
	DynamicValueInterpolator mSuitaInterpolator;
	DynamicValueInterpolator mOxygenInterpolator;

	Color PlayerColor;


	Protected void DrawCompass(int x, int y)
	{
		double ang = CPlayer.mo.angle;//+180;
		Screen.DrawTexture(TexMan.CheckForTexture("Graphics/NSNORTH.png", TexMan.Type_Any), False, x, y, DTA_CenterOffset, True, DTA_Rotate, ang);
	}

	override void Init()
	{
		Super.Init();
		SetSize(0, 320, 200);

		// Create the font used for the fullscreen HUD
		Font fnt = "HUDFONT_DOOM";
		mHUDFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft, 1, 1);
		fnt = "INDEXFONT_DOOM";
		mIndexFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft);
		mAmountFont = HUDFont.Create("INDEXFONT");

		diparms = InventoryBarState.Create();
		mHeatInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		mHealthInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		mArmorInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		//mSuitaInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		mOxygenInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);

		mSmallFont = HUDFont.Create("SmallFont");
		mNSmallFont = HUDFont.Create("NewSmallFont");
	}

	override void NewGame()
	{
		Super.NewGame();

		mHealthInterpolator.Reset(0);
		mArmorInterpolator.Reset(0);
	}
	override void Tick()
	{
		Super.Tick();
		PlayerColor = CPlayer.GetDisplayColor();

		mHealthInterpolator.Update(CPlayer.Health); // Set the interpolator's value to this player's health
		mArmorInterpolator.Update(GetArmorAmount());
		//mSuitaInterpolator.GetValue();
		mOxygenInterpolator.GetValue();
	}

	override void Draw(int state, double TicFrac)
	{
		Super.Draw(state, TicFrac);
		BeginHUD();
		if(!automapactive)
		{
			if(state == HUD_StatusBar || state == HUD_Fullscreen)
			{
				DrawFullScreenStuff();
			}
		}
	}

	protected void DrawFullScreenStuff()
	{
		//if (CPlayer.mo is "WW2Player")

		let berserk = CPlayer.mo.FindInventory("PowerStrength");	
		Fill(color(153, 255, 0, 0), 10, -5, 5, -100 * clamp(mHealthInterpolator.GetValue()/double(CPlayer.mo.GetMaxHealth(False)), 0.0, 1.0));
		DrawString(mSmallFont, FormatNumber(CPlayer.Health), (30, -12), translation: berserk? Font.CR_RED : Font.CR_WHITE);

		let armor = CPlayer.mo.FindInventory("BasicArmor");
		let radsuit = Powerup(CPlayer.mo.FindInventory('PowerMask')); //CPlayer.mo.FindInventory("PowerMask");
		if(armor != null && armor.Amount > 0)
		{
			int min = 0;
			int max = 100;
			double cur = mArmorInterpolator.GetValue()/double(1); //GetArmorAmount();
			Fill(color(153, PlayerColor.R, PlayerColor.G, PlayerColor.B), 15, 165 + LinearMap(cur, min, max, max, min), 5, LinearMap(cur, min, max, min, max)); 

			DrawString(mSmallFont, FormatNumber(armor.Amount), (30, -22), translation: radsuit? Font.CR_GREEN : Font.CR_WHITE);
		}
		If(radsuit)
		{
			int min = 0;
			int max = 80; //Duration of PowerMask : 80 seconds (2800 tics)
			double cur = radsuit.EffectTics / double(TICRATE);
			Fill(color(192, 0, 255, 0), 20, -85 + LinearMap(cur, min, max, max, min), 5, LinearMap(cur, min, max, min, max)); 
		}
		If(CPlayer.mo.WaterLevel > 1 && !radsuit) { Fill(color(153, 255, 255, 255), 5, -5, 5, -5 * Thinker.Tics2Seconds(GetAirTime())); }

		Inventory ammotype1, ammotype2;
		[ammotype1, ammotype2] = GetCurrentAmmo();
		Let Ammo_Mp40a = CPlayer.mo.FindInventory("MP40Loaded_1");
		Let Ammo_Mp40b = CPlayer.mo.FindInventory("MP40Loaded_2");
		Let Ammo_TNT = CPlayer.mo.FindInventory("AmmoTNT");
		Let Ammo_HG = CPlayer.mo.FindInventory("AmmoGranate");
		Int Ammo_Y = -10;
		Int amt1, maxamt;

  		If(CPlayer.ReadyWeapon != null)
  		{
			If(CheckWeaponSelected('Knife')) { DrawImage("WEAPON_0", (-50, -113), DI_ITEM_OFFSETS); }
			If(CPlayer.ReadyWeapon.Ammo2 && (CPlayer.ReadyWeapon.Ammo2 != CPlayer.ReadyWeapon.Ammo1)) // crash if type "take all" in console
			{
				If(CheckWeaponSelected('Luger'))
				{
					DrawAmmoBar("Graphics/Hud/HUD_AMMO_P.png", (-23, Ammo_Y), 1, 0, 6);
					DrawImage("WEAPON_1", (-57, -65), DI_ITEM_OFFSETS);
				}
				If(CheckWeaponSelected('Walther'))
				{
					for(int i = CPlayer.Mo.CountInv("WaltherLoaded"); i > 0; i--)
					{
						DrawImage("Graphics/Hud/HUD_AMMO_P.png", (-23, Ammo_Y), DI_ITEM_OFFSETS);
						Ammo_Y = Ammo_Y - 6;
					}
					DrawImage("WEAPON_8", (-59, -95), DI_ITEM_OFFSETS);
				}
				If(CheckWeaponSelected('TrenchGun'))
				{
					DrawAmmoBar("Graphics/Hud/HUD_AMMO_S.png", (-23, Ammo_Y), 1, 0, 6);
					DrawImage("WEAPON_2", (-41, -114), DI_ITEM_OFFSETS);
				}
				If(CheckWeaponSelected('BA5'))
				{
					DrawAmmoBar("Graphics/Hud/HUD_AMMO_S.png", (-23, Ammo_Y), 1, 0, 6);
					DrawImage("WEAPON_7", (-41, -114), DI_ITEM_OFFSETS);
				}
				If(CheckWeaponSelected('MP40'))
				{
					DrawAmmoBar("Graphics/Hud/HUD_AMMO_P.png", (-23, Ammo_Y), 1, 0, 6);
					DrawImage("WEAPON_3", (-60, -94), DI_ITEM_OFFSETS);
				}
				If(CheckWeaponSelected('STEN'))
				{
					Let ptr = STEN(CPlayer.mo.FindInventory('STEN'));
					DrawAmmoBar("Graphics/Hud/HUD_AMMO_P.png", (-23, Ammo_Y), 1, 0, 6);
					DrawImage("WEAPON_9", (-51, -133), DI_ITEM_OFFSETS);

					mHeatInterpolator.Update(ptr.STEN_Heat);
					Fill(color(96, 255, 0, 0), -36, -96, 7, -37 * clamp(mHeatInterpolator.GetValue()/double(120), 0.0, 1.0), DI_ITEM_OFFSETS);
				}
				If(CheckWeaponSelected('G43'))
				{
					Let ptr = G43(CPlayer.mo.FindInventory('G43'));
					If(!ptr.RGrenade)
					{
						DrawAmmoBar("Graphics/Hud/HUD_AMMO_R.png", (-23, Ammo_Y), 1, 0, 6);
					}
					Else { DrawImage("Graphics/Hud/HUD_AMMO_G.png", (-23, -12), DI_ITEM_OFFSETS); }
					DrawImage("WEAPON_4", (-50, -165), DI_ITEM_OFFSETS);
				[amt1, maxamt] = GetAmount("AmmoRifleGrenade");
					DrawString(mSmallFont, FormatNumber(amt1, 3), (-30, -22), DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE);
				}
				If(CheckWeaponSelected('Kar98k'))
				{
					DrawAmmoBar("Graphics/Hud/HUD_AMMO_R.png", (-23, Ammo_Y), 1, 0, 6);
					DrawImage("WEAPON_A", (-56, -171), DI_ITEM_OFFSETS);
				}
				If(!CheckWeaponSelected('MP40')) { DrawString(mSmallFont, FormatNumber(ammotype1.Amount, 3), (-60, -12), DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE); }
				Else
				{
					 DrawString(mSmallFont, FormatNumber(Ammo_Mp40a.Amount, 3), (-60, -12), DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE);
					 DrawString(mSmallFont, FormatNumber(Ammo_Mp40b.Amount, 3), (-60, -22), DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE);
				}
				DrawString(mSmallFont, FormatNumber(ammotype2.Amount, 3), (-30, -12), DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE);
			}
			Else If(CPlayer.ReadyWeapon.Ammo1)
			{
				If(CheckWeaponSelected('Flammenwerfer'))
				{
					Let ptr = Flammenwerfer(CPlayer.mo.FindInventory('Flammenwerfer'));
					DrawImage("WEAPON_6", (-61, -162), DI_ITEM_OFFSETS);
					If(ptr.Empty) { DrawString(mSmallFont, "RELOAD", (-60, -12), DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE); }
				}
				If(CheckWeaponSelected('UMG43'))
				{ 
					Let ptr = UMG43(CPlayer.mo.FindInventory('UMG43'));
					DrawImage("WEAPON_5", (-66, -141), DI_ITEM_OFFSETS);
					If(ptr.Empty) { DrawString(mSmallFont, "RELOAD", (-60, -12), DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE); }
				}
				DrawString(mSmallFont, FormatNumber(ammotype1.Amount, 3), (-30, -12), DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE);
			}
		}

		int invY = -20;
		if (!isInventoryBarVisible() && !level.NoInventoryBar && CPlayer.mo.InvSel != null)
		{
			DrawInventoryIcon(CPlayer.mo.InvSel, (-160, invY + 17)); // -14
			DrawString(mHUDFont, FormatNumber(CPlayer.mo.InvSel.Amount, 3), (-176, invY), DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE); // -30
		}
		if (deathmatch) { DrawString(mHUDFont, FormatNumber(CPlayer.FragCount, 3), (-3, 1), DI_TEXT_ALIGN_RIGHT, Font.CR_GOLD); }
		else { DrawFullscreenKeys(); }

		if (isInventoryBarVisible()) { DrawInventoryBar(diparms, (0, 0), 7, DI_SCREEN_CENTER_BOTTOM, HX_SHADOW); }

		Let tnt = AmmoTNT(CPlayer.mo.FindInventory('AmmoTNT'));
		DrawImage("Graphics/Hud/HUD_DYNAMITE.png", (-130, -21), DI_ITEM_OFFSETS);
		DrawString(mSmallFont, FormatNumber(Ammo_TNT.Amount, 3), (-122, -12), DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE);
		DrawString(mSmallFont, FormatNumber(tnt.counter, 3), (-122, -22), DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE);

		Let shg = AmmoGranate(CPlayer.mo.FindInventory('AmmoGranate'));
		If(shg.shgmod == True && Ammo_HG.Amount >= 5) { DrawImage("Graphics/Hud/HUD_HGRENADE_2.png", (-150, -21), DI_ITEM_OFFSETS); }
		Else { DrawImage("Graphics/Hud/HUD_HGRENADE.png", (-145, -21), DI_ITEM_OFFSETS); }
		DrawString(mSmallFont, FormatNumber(Ammo_HG.Amount, 3), (-140, -12), DI_TEXT_ALIGN_RIGHT, shg.shgmod? Font.CR_RED : Font.CR_WHITE);
	}

	protected virtual void DrawFullscreenKeys()
	{
		// Draw the keys. This does not use a special draw function like SBARINFO because the specifics will be different for each mod
		// so it's easier to copy or reimplement the following piece of code instead of trying to write a complicated all-encompassing solution.
		Vector2 keypos = (-10, 2);
		int rowc = 0;
		double roww = 0;
		for(let i = CPlayer.mo.Inv; i != null; i = i.Inv)
		{
			if (i is "Key" && i.Icon.IsValid())
			{
				DrawTexture(i.Icon, keypos, DI_SCREEN_RIGHT_TOP|DI_ITEM_LEFT_TOP);
				Vector2 size = TexMan.GetScaledSize(i.Icon);
				keypos.Y += size.Y + 2;
				roww = max(roww, size.X);
				if (++rowc == 3)
				{
					keypos.Y = 2;
					keypos.X -= roww + 2;
					roww = 0;
					rowc = 0;
				}
			}
		}
	}

	void DrawAmmoBar(string texture, vector2 ammopos, int rowsize, int x_spacing, int y_spacing)
    {
		double defaulty = ammopos.y;
		Inventory ammo = GetCurrentAmmo();
		int prow = ammo.MaxAmount/rowsize;
		int crow;
		
		For(int i=ammo.Amount; i>0; i--){
			DrawImage(texture, ammopos, DI_ITEM_OFFSETS);
			ammopos.y-=y_spacing;
			crow++;
			If(crow>=prow){
				crow=0;
				ammopos.y=defaulty;
				ammopos.x-=x_spacing;
			}
		}
	}
}
