Class TrenchGun : AxisWeapon
{
	Bool reload, empty, lower, notpumped;
	Int sequence;
	Default
	{
		Weapon.SelectionOrder 400;
		Weapon.SlotNumber 3;
		Weapon.AmmoUse 1;
		Weapon.AmmoType "TrenchGunLoaded";
		Weapon.AmmoType2 "Ammo12G";
		Inventory.PickupMessage "You got the Winchester Model 1897!";
		//+WEAPON.NOAUTOFIRE
		Scale 0.45;
		Tag "$TAG_WEAPON_WINCHESTERM1897";
		Weapon.UpSound "shotgun/select";
	}
	Override Void AttachToOwner(Actor other)
	{
		Super.AttachToOwner(other);
		other.A_GiveInventory("TrenchGunLoaded", random(1, bTOSSED ? 3 : 6));
	}
   	Override Bool TryPickup(in out Actor toucher)  
    {
		If(toucher)
		{
			Let weap = toucher.FindInventory("TrenchGun");
			If(!weap) { Self.AmmoGive2 = 0; }
			Else { Self.AmmoGive2 = random(1,3); }
		}
			Return Super.TryPickup(toucher);
	}

	States
	{
	Spawn:
		WP2P A -1;
		Stop;
	Select:
		WP2E A 0 A_JumpIf(!CountInv("TrenchGunLoaded"), 2);
		WP2G A 0;
		#### # 1 A_Raise(12);
		Loop;
	Ready:
		WP2E A 0 A_JumpIf(!CountInv("TrenchGunLoaded"), 2);
		WP2G A 0;
		#### A 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
	Deselect:
		TNT1 A 0 { Invoker.lower = True; }
		TNT1 A 0 A_JumpIf(Invoker.reload, "ReloadFinish");
		WP2E A 0 A_JumpIf(!CountInv("TrenchGunLoaded"), 2);
		WP2G A 0;
		#### # 0 { Invoker.lower = False; }
		#### # 1 A_Lower(12);
		Loop;

	Fire:
		#### A 0 A_JumpIf(!CountInv(Invoker.Ammo1.GetClass()), "Reload");
		#### A 0 A_JumpIf(Invoker.reload, "ReloadFinish");
		WP2G B 2
		{
			A_GunFlash();
			A_AlertMonsters();
			A_FireBullets(2, 2, 10, random(5,15), "BulletPuff_2", FBF_USEAMMO|FBF_NORANDOMPUFFZ);
			A_StartSound("shotgun/fire", CHAN_WEAPON);
			Invoker.notpumped = True;
		}
		#### # 1 A_WeaponOffset(0,36,WOF_INTERPOLATE);
		#### # 1 A_WeaponOffset(0,40,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,36,WOF_INTERPOLATE);
		WP2E A 2 A_WeaponOffset(0,32,WOF_INTERPOLATE);
		#### # 1 A_JumpIf(GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK, "SlamFire");
	Pump:
		#### A 1 A_WeaponOffset(-1,33,WOF_INTERPOLATE);
		WP2G C 1 { A_WeaponOffset(5,34,WOF_INTERPOLATE); A_StartSound("shotgun/pump",CHAN_WEAPON); }
		#### C 1 A_WeaponOffset(2,36,WOF_INTERPOLATE);
		#### C 1 A_WeaponOffset(-1,38,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(3,35,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-1,38,WOF_INTERPOLATE);
		#### E 1 A_WeaponOffset(-4,41,WOF_INTERPOLATE);
		#### E 1
		{
			A_WeaponOffset(-4,43,WOF_INTERPOLATE);
			A_FireProjectile("Casing_Spawner_Shotgun", 0, False, -4, -4, FPF_NOAUTOAIM);
			Invoker.notpumped = False;
		}
		#### F 1 A_WeaponOffset(-4,45,WOF_INTERPOLATE);
		#### F 1 A_WeaponOffset(-3,44,WOF_INTERPOLATE);
		#### E 1 A_WeaponOffset(-2,40,WOF_INTERPOLATE);
		#### E 1 A_WeaponOffset(-4,41,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-1,38,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-1,37,WOF_INTERPOLATE);
		#### C 1 A_WeaponOffset(1,36,WOF_INTERPOLATE);
		#### C 1 A_WeaponOffset(2,36,WOF_INTERPOLATE);
		WP2E A 0 A_JumpIf(!CountInv(Invoker.Ammo1.GetClass()), 2);
		WP2G A 0;
		#### A 1 A_WeaponOffset(5,34,WOF_INTERPOLATE);
		#### A 1 { A_WeaponOffset(0,32,WOF_INTERPOLATE); A_WeaponReady(WRF_ALLOWRELOAD|WRF_NOBOB); }
		#### # 0 A_ReFire();
		Goto Ready;
	SlamFire:
		WP2G A 1 A_WeaponOffset(0,36,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,34,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,33,WOF_INTERPOLATE);
		#### H 1 A_WeaponOffset(0,32,WOF_INTERPOLATE);
		#### G 1 { A_WeaponOffset(0,38,WOF_INTERPOLATE); A_StartSound("shotgun/pump", CHAN_AUTO); }
		#### # 1
		{
			A_WeaponOffset(0,35,WOF_INTERPOLATE);
			If(Invoker.reload == False) { A_FireProjectile("Casing_Spawner_Shotgun", 0, False, 0, 0, FPF_NOAUTOAIM); }
			//{ A_SpawnItemEx("Casing_Shotgun",12,-20,32,8,random(-2,2),random(0,4),random(-55,-80),SXF_NOCHECKPOSITION); }
			Else { Invoker.reload = False; }
			Invoker.notpumped = False; 
		}
		#### # 1 { A_WeaponOffset(0,32,WOF_INTERPOLATE); A_WeaponReady(WRF_NOBOB); }
		WP2E A 0 A_JumpIf(!CountInv("TrenchGunLoaded"), 2);
		WP2G A 0;
		#### A 1 { A_WeaponOffset(0,32,WOF_INTERPOLATE); A_WeaponReady(WRF_NOBOB); }
		Goto Ready;
	
	Flash:
		WP2F A 1 BRIGHT A_Light1;
		#### B 2 BRIGHT A_Light2;
		Goto LightDone;

	Reload:
		TNT1 A 0 A_JumpIf(Invoker.Ammo1.Amount == Invoker.Ammo1.MaxAmount, "Ready");
		TNT1 A 0 A_JumpIf(Invoker.Ammo1.Amount > 0, "ReloadWork");
		TNT1 A 0 { Invoker.empty = True; }
	ReloadWork:
		TNT1 A 0 A_JumpIf(Invoker.Ammo2.Amount > 0, 1);
        Goto Ready;
		TNT1 A 0 { Invoker.reload = True; }		
		TNT1 A 0 A_JumpIf(Invoker.Ammo1.Amount == (Invoker.Ammo1.MaxAmount - 1) && Invoker.notpumped, "ReloadPump");
		WP2G C 1 A_WeaponOffset(5,34,WOF_INTERPOLATE);
		#### C 1 A_WeaponOffset(2,36,WOF_INTERPOLATE);
		#### C 1 A_WeaponOffset(-1,38,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(3,35,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-1,38,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-4,41,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-6,46,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-7,55,WOF_INTERPOLATE);
	ReloadLoop:
		TNT1 A 0 A_JumpIf(Invoker.Ammo1.Amount == Invoker.Ammo1.MaxAmount || Invoker.Ammo2.Amount < 1, "ReloadFinish");
		TNT1 A 0 A_JumpIf(Invoker.sequence == 3, "GetMoreShells");
		WP2G D 1
		{
			A_WeaponOffset(-8,58,WOF_INTERPOLATE);
			A_StartSound("shotgun/load", CHAN_WEAPON);
			A_HandReload(Invoker.AmmoType1);
			Invoker.sequence++;
		}
		#### D 1 A_WeaponOffset(-9,64,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-10,70,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-10,68,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-9,66,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-9,64,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-9,62,WOF_INTERPOLATE);
		#### D 1 { A_WeaponOffset(-8,61,WOF_INTERPOLATE); A_WeaponReady(WRF_NOBOB); }
		#### D 1 { A_WeaponOffset(-8,60,WOF_INTERPOLATE); A_WeaponReady(WRF_NOBOB); }
		#### D 2 { A_WeaponOffset(-8,59,WOF_INTERPOLATE); A_WeaponReady(WRF_NOBOB); }
		#### D 3 { A_WeaponOffset(-8,58,WOF_INTERPOLATE); A_WeaponReady(WRF_NOBOB); }
		TNT1 A 0 A_JumpIf(Invoker.Ammo1.Amount == (Invoker.Ammo1.MaxAmount - 1) && Invoker.notpumped, "ReloadFinish");
		TNT1 A 0 A_JumpIf(Invoker.Ammo1.Amount == (Invoker.Ammo1.MaxAmount - 1) && Invoker.empty || Invoker.Ammo2.Amount < 1 && Invoker.empty, "ReloadFinish");
		TNT1 A 0 A_JumpIf(Invoker.Ammo1.Amount == Invoker.Ammo1.MaxAmount, "ReloadFinish");
		Goto ReloadLoop;
	ReloadFinish:
		TNT1 A 0 A_JumpIf(Invoker.empty == False && Invoker.notpumped == True, "ReloadPump");
		TNT1 A 0 A_JumpIf(Invoker.empty == False, "ReloadFinish_2");
	ReloadPump:
		WP2G D 1 { A_WeaponOffset(3,35,WOF_INTERPOLATE); A_StartSound("shotgun/pump", CHAN_5); }
		#### D 1 A_WeaponOffset(-1,38,WOF_INTERPOLATE);
		#### E 1 A_WeaponOffset(-4,41,WOF_INTERPOLATE);
		#### E 1 A_WeaponOffset(-1,33,WOF_INTERPOLATE);
		#### F 1 A_WeaponOffset(-2,37,WOF_INTERPOLATE);
		#### F 1 A_WeaponOffset(-3,43,WOF_INTERPOLATE);
		#### E 1
		{
			A_WeaponOffset(-2,40,WOF_INTERPOLATE);
			If(Invoker.notpumped == True)
			{
				A_FireProjectile("Casing_Spawner_Shotgun", 0, False, -4, -4, FPF_NOAUTOAIM);
				Invoker.notpumped = False;
			}
		}
		#### E 1 A_WeaponOffset(-4,41,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-1,38,WOF_INTERPOLATE);
	ReloadFinish_2:
		WP2G D 1 A_WeaponOffset(3,35,WOF_INTERPOLATE);
		#### C 1 A_WeaponOffset(-1,38,WOF_INTERPOLATE);
		#### C 1 A_WeaponOffset(2,36,WOF_INTERPOLATE);
		#### C 1 A_WeaponOffset(5,34,WOF_INTERPOLATE);
		#### C 1 { A_WeaponOffset(0,32,WOF_INTERPOLATE); Invoker.empty = False; Invoker.reload = False; Invoker.sequence = 0; }
		TNT1 A 0 A_JumpIf(Invoker.lower, "Deselect");
		Goto Ready;

	GetMoreShells:
		WP2G D 2 A_WeaponOffset(-8,58,WOF_INTERPOLATE);
		#### # 2 A_WeaponOffset(-9,64,WOF_INTERPOLATE);
		#### # 2 { A_WeaponOffset(-10,70,WOF_INTERPOLATE); A_StartSound("shotgun/shells", CHAN_5); }
		#### # 2 A_WeaponOffset(-10,68,WOF_INTERPOLATE);
		#### # 2 A_WeaponOffset(-9,66,WOF_INTERPOLATE);
		#### # 3 A_WeaponOffset(-9,64,WOF_INTERPOLATE);
		#### # 4 { A_WeaponOffset(-9,62,WOF_INTERPOLATE); Invoker.sequence = 0; }
		Goto ReloadLoop;
	}
}

Class TrenchGunLoaded : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 6;
	}
}
