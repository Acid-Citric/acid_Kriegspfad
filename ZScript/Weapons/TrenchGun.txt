Class TrenchGun : AxisWeapon
{
	Bool shotgunreload, shotgunempty, shotgunlower, shotgunnotpumped;
	Default
	{
		Weapon.SelectionOrder 400;

		Weapon.AmmoType "TrenchGunLoaded";
		Weapon.AmmoType2 "Ammo12G";
		Inventory.PickupMessage "You got the Winchester Model 1897!";
		+WEAPON.NOAUTOFIRE
		Scale 0.45;
		Tag "$TAG_WEAPON_WINCHESTERM1897";
		Weapon.UpSound "shotgun/select";
	}
	Override Void AttachToOwner(Actor other)
	{
		Super.AttachToOwner(other);
		If(bTOSSED) { other.A_GiveInventory("TrenchGunLoaded", random(1,3)); }
		Else { other.A_GiveInventory("TrenchGunLoaded", random(1,6)); }
	}
   	Override Bool TryPickup(in out Actor toucher)
    {
		If(toucher)
		{
			Let weap = toucher.FindInventory("TrenchGun");
			If(!weap) { Self.AmmoGive2 = 0; }
			Else If(bTOSSED || !bTOSSED) { Self.AmmoGive2 = random(1,3); }
		}
			Return Super.TryPickup(toucher);
	}
	States
	{
	Spawn:
		WP2P A -1;
		Stop;
	Select:
		WP2E A 0 A_JumpIf(!CountInv("TrenchGunLoaded"), 2);
		WP2G A 0;
		#### # 1 A_Raise(12);
		Loop;
	Ready:
		WP2E A 0 A_JumpIf(!CountInv("TrenchGunLoaded"), 2);
		WP2G A 0;
		#### A 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
	Deselect:
		TNT1 A 0 { Invoker.shotgunlower = True; }
		TNT1 A 0 A_JumpIf(Invoker.shotgunreload, "ReloadFinish");
		WP2E A 0 A_JumpIf(!CountInv("TrenchGunLoaded"), 2);
		WP2G A 0;
		#### # 0 { Invoker.shotgunlower = False; }
		#### # 1 A_Lower(12);
		Loop;

	Fire:
		#### A 0 A_JumpIf(!CountInv("TrenchGunLoaded"), "Reload");
		#### A 0 A_JumpIf(Invoker.shotgunreload, "ReloadFinish");
		#### A 0 A_JumpIf(Invoker.shotgunnotpumped, "Pump");
		WP2G B 2
		{
			A_GunFlash();
			A_AlertMonsters();
			A_FireBullets(2, 2, 10, random(5,15), "BulletPuff_2", FBF_NORANDOMPUFFZ);
			A_StartSound("shotgun/fire", CHAN_WEAPON);
			A_TakeInventory("TrenchGunLoaded",1);
			Invoker.shotgunnotpumped = True;
		}
		#### # 1 A_WeaponOffset(0,32,WOF_INTERPOLATE); 
		WP2E A 1 A_WeaponOffset(0,40,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,36,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,34,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,33,WOF_INTERPOLATE);
		WP2E A 7 { A_WeaponOffset(0,32,WOF_INTERPOLATE); A_WeaponReady(WRF_NOFIRE); }
	Pump:
		#### A 1 A_WeaponOffset(-1,33,WOF_INTERPOLATE); 
		WP2G C 1 { A_WeaponOffset(5,34,WOF_INTERPOLATE); A_StartSound("shotgun/pump",CHAN_WEAPON); Invoker.shotgunnotpumped = False; }
		#### C 1 A_WeaponOffset(2,36,WOF_INTERPOLATE);
		#### C 1 A_WeaponOffset(-1,38,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(3,35,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-1,38,WOF_INTERPOLATE);
		#### E 1 A_WeaponOffset(-4,41,WOF_INTERPOLATE);
		#### E 1 
		{
			A_WeaponOffset(-4,43,WOF_INTERPOLATE);

			Int SX_zofs = 32*GetCrouchFactor(AAPTR_Default);
			A_SpawnItemEx("Casing_Shotgun",cos(pitch)*12,-20,(SX_zofs)-(sin(pitch)*(SX_zofs)),cos(pitch)*8,random(-2,2),-sin(pitch)*random(0,4),random(-55,-80),SXF_TRANSFERPITCH);
		}
		#### F 1 A_WeaponOffset(-4,45,WOF_INTERPOLATE);
		#### F 1 A_WeaponOffset(-3,44,WOF_INTERPOLATE);
		#### E 1 A_WeaponOffset(-2,40,WOF_INTERPOLATE);
		#### E 1 A_WeaponOffset(-4,41,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-1,38,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-1,37,WOF_INTERPOLATE);
		#### C 1 A_WeaponOffset(1,36,WOF_INTERPOLATE);
		#### C 1 A_WeaponOffset(2,36,WOF_INTERPOLATE);
		WP2E A 0 A_JumpIf(!CountInv("TrenchGunLoaded"), 2);
		WP2G A 0;
		#### A 1 A_WeaponOffset(5,34,WOF_INTERPOLATE);
		#### A 1 { A_WeaponOffset(0,32,WOF_INTERPOLATE); A_WeaponReady(WRF_NOBOB); }
		#### # 0 A_ReFire();
		Goto Ready;
	Flash:
		WP2F A 1 BRIGHT A_Light1;
		#### B 2 BRIGHT A_Light2;
		Goto LightDone;

	Reload:
		TNT1 A 0 A_JumpIfInventory("TrenchGunLoaded", 6, "Ready");
		TNT1 A 0 A_JumpIf(CountInv("TrenchGunLoaded") > 0 || CountInv("PowerInfiniteAmmo"), "ReloadWork");
		TNT1 A 0 { Invoker.shotgunempty = True; }
	ReloadWork:
		TNT1 A 0 A_JumpIf(CountInv("Ammo12G") > 0 || CountInv("PowerInfiniteAmmo"), 1);
        Goto Ready;
		TNT1 A 0 { Invoker.shotgunreload = True; }
		TNT1 A 0 A_JumpIf(CountInv("TrenchGunLoaded") == 5 && Invoker.shotgunnotpumped, "ReloadPump");
		WP2G C 1 A_WeaponOffset(5,34,WOF_INTERPOLATE);
		#### C 1 A_WeaponOffset(2,36,WOF_INTERPOLATE);
		#### C 1 A_WeaponOffset(-1,38,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(3,35,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-1,38,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-4,41,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-6,46,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-7,55,WOF_INTERPOLATE);
	ReloadLoop:
		TNT1 A 0 A_JumpIf(CountInv("TrenchGunLoaded") == 6 || CountInv("Ammo12G") < 1 && !CountInv("PowerInfiniteAmmo"), "ReloadFinish");
		WP2G D 1
		{
			A_WeaponOffset(-8,58,WOF_INTERPOLATE);
			A_StartSound("shotgun/load", CHAN_WEAPON);
			A_TakeInventory("Ammo12G",1,TIF_NOTAKEINFINITE);
			A_GiveInventory("TrenchGunLoaded",1);
		}
		#### D 1 A_WeaponOffset(-9,64,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-10,70,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-10,68,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-9,66,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-9,64,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-9,62,WOF_INTERPOLATE);
		#### D 1 { A_WeaponOffset(-8,61,WOF_INTERPOLATE); A_WeaponReady(WRF_NOBOB|WRF_NOSECONDARY); }
		#### D 1 { A_WeaponOffset(-8,60,WOF_INTERPOLATE); A_WeaponReady(WRF_NOBOB|WRF_NOSECONDARY); }
		#### D 2 { A_WeaponOffset(-8,59,WOF_INTERPOLATE); A_WeaponReady(WRF_NOBOB|WRF_NOSECONDARY); }
		#### D 3 { A_WeaponOffset(-8,58,WOF_INTERPOLATE); A_WeaponReady(WRF_NOBOB|WRF_NOSECONDARY); }
		TNT1 A 0 A_JumpIf(CountInv("TrenchGunLoaded") == 5 && Invoker.shotgunnotpumped, "ReloadFinish");
		TNT1 A 0 A_JumpIf(CountInv("TrenchGunLoaded") == 5 && Invoker.shotgunempty || CountInv("Ammo12G") < 1 && !CountInv("PowerInfiniteAmmo") && Invoker.shotgunempty, "ReloadFinish");
		TNT1 A 0 A_JumpIf(CountInv("TrenchGunLoaded") == 6 || CountInv("Ammo12G") < 1 && !CountInv("PowerInfiniteAmmo"), "ReloadFinish_2");
		Goto ReloadLoop;
	ReloadFinish:
		TNT1 A 0 A_JumpIf(Invoker.shotgunempty == False && Invoker.shotgunnotpumped == True, "ReloadPump");
		TNT1 A 0 A_JumpIf(Invoker.shotgunempty == False, "ReloadFinish_2");
	ReloadPump:
		WP2G D 1 { A_WeaponOffset(3,35,WOF_INTERPOLATE); A_StartSound("shotgun/pump", CHAN_5); }
		#### D 1 A_WeaponOffset(-1,38,WOF_INTERPOLATE);
		#### E 1 A_WeaponOffset(-4,41,WOF_INTERPOLATE);
		#### E 1 A_WeaponOffset(-1,33,WOF_INTERPOLATE);
		#### F 1 A_WeaponOffset(-2,37,WOF_INTERPOLATE);
		#### F 1 A_WeaponOffset(-3,43,WOF_INTERPOLATE);
		#### E 1 
		{
			A_WeaponOffset(-2,40,WOF_INTERPOLATE);
			If(Invoker.shotgunnotpumped == True)
			{
				Int SX_zofs = 32*GetCrouchFactor(AAPTR_Default);
				A_SpawnItemEx("Casing_Shotgun",cos(pitch)*12,-20,(SX_zofs)-(sin(pitch)*(SX_zofs)),cos(pitch)*8,random(-2,2),-sin(pitch)*random(0,4),random(-55,-80),SXF_TRANSFERPITCH);
				Invoker.shotgunnotpumped = False;
			}
		}
		#### E 1 A_WeaponOffset(-4,41,WOF_INTERPOLATE);
		#### D 1 A_WeaponOffset(-1,38,WOF_INTERPOLATE);
	ReloadFinish_2:
		WP2G D 1 A_WeaponOffset(3,35,WOF_INTERPOLATE);
		#### C 1 A_WeaponOffset(-1,38,WOF_INTERPOLATE);
		#### C 1 A_WeaponOffset(2,36,WOF_INTERPOLATE);
		#### C 1 A_WeaponOffset(5,34,WOF_INTERPOLATE);
		#### C 1 { A_WeaponOffset(0,32,WOF_INTERPOLATE); Invoker.shotgunempty = False; Invoker.shotgunreload = False; }
		TNT1 A 0 A_JumpIf(Invoker.shotgunlower, "Deselect");
		Goto Ready;
	}
}

Class TrenchGunLoaded : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 6;
	}
}
