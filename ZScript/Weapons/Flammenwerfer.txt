Class Flammenwerfer : AxisWeapon
{
	Int counter;
	Default
	{
		Weapon.SelectionOrder 100;

		Weapon.AmmoType "AmmoFuel";
		Inventory.PickupMessage "You got the Flammenwerfer!";
		+WEAPON.AMMO_OPTIONAL
		Tag "$TAG_WEAPON_FLAMMENWERFER";
		Weapon.UpSound "flamer/select";
	}
   	Override Bool TryPickup(in out Actor toucher)
    {
		If(toucher)
		{
			Let weap = toucher.FindInventory("Flammenwerfer");
			If(!weap) { Self.AmmoGive1 = random(50,150); }
			Else { Self.AmmoGive1 = random(10,50); }
		}
			Return Super.TryPickup(toucher);
	}
	States
	{
	Spawn:
		WP6P A -1;
		Stop;
	Select:
		TNT1 A 0 A_Raise();
	FinishSelect:
		WP6H A 1 A_WeaponOffset(0,90,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,80,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,70,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,60,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,55,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,49,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,44,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,39,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,35,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,33,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,32,WOF_INTERPOLATE);
		#### A 1 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
	Ready:
		WP6H A 1
		{
			If(WaterLevel == 0)	{ return ResolveState("ReadyLoop"); }
			A_WeaponReady(WRF_NOFIRE);
			return A_JumpIf(CountInv("AmmoFuel"), "ReadyLoop");
		}
		Loop;
	ReadyLoop:
		WP6H A 0 A_StartSound("flamer/start", CHAN_WEAPON);
		WP6H ABCD 2 BRIGHT
		{
			If(WaterLevel > 1)	{ return ResolveState("Nope"); }
			A_WeaponReady(WRF_NOFIRE);
			return A_JumpIf(!CountInv("AmmoFuel"), "Ready");
		}
		WP6G ABCD 2 BRIGHT
		{
			If(WaterLevel > 1)	{ return ResolveState("Nope"); }
			A_WeaponReady(WRF_NOFIRE);
			return A_JumpIf(!CountInv("AmmoFuel"), "Ready");
		}
		Goto ReadyLoop+6;
	Deselect:
		WP6H A 1;
		#### A 1 A_WeaponOffset(0,33,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,35,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,39,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,44,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,49,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,55,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,60,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,70,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,80,WOF_INTERPOLATE);
		#### A 1 A_WeaponOffset(0,90,WOF_INTERPOLATE);
	FinishDeselect:
		TNT1 A 0 A_Lower();
		Loop;

	Fire:
		WP6F A 0 A_JumpIfInventory("AmmoFuel", 1, 1);
		Goto Ready;
		#### B 1 BRIGHT
		{
			A_GunFlash();
			A_AlertMonsters();
			A_FireProjectile("FlammenwerferProj", 0, False, 0, 5, 0, FRandom(3, 4));
			A_WeaponOffset(random(-2,2),random(30,34),WOF_INTERPOLATE);
			
			If(Invoker.counter == 5) { Invoker.counter = 0; A_TakeInventory("AmmoFuel", 1, TIF_NOTAKEINFINITE); }
			Else { Invoker.counter++; }
		}
		#### A 0 A_JumpIfInventory("AmmoFuel", 1, 1);
		Goto Ready;
		#### A 0 A_ReFire();
		#### B 3 A_WeaponOffset(0,32,WOF_INTERPOLATE);
		Goto ReadyLoop;
	Flash:
		TNT1 A 1 BRIGHT A_Light2;
		TNT1 A 1 BRIGHT A_Light1;
		Goto LightDone;

	Nope:
		WP6H A 1 A_WeaponReady(WRF_NOFIRE);
		Goto Ready;
	}
}

Class FlammenwerferProj : FastMissile
{
	Default
	{
		Radius 36.5;
		Height 60;
		FastMissile.RadiusScale 0.1;
		FastMissile.HeightScale 0.1;
		FastMissile.RadiusScaleFactor 0.03;
		FastMissile.HeightScaleFactor 0.03;
		
		FastMissile.DOTType "BurnDOT";
		
		Scale 0.275;
		FastMissile.XScaleFactor 0.03;
		FastMissile.YScaleFactor 0.03;
		
		DamageFunction 10;
		DamageType "Fire";
		Speed 24;
		RenderStyle "Add";
		Alpha 0.75;
		Obituary "%o was burned to death by %k.";
		
		+FORCEXYBILLBOARD
		+BLOODLESSIMPACT
		+PAINLESS
		+FASTMISSILE.HITONCE
		SeeSound "flamer/fire";
	}
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(WaterLevel > 1, "Nope");
		TNT1 A 0 { bPAINLESS = random(0,1); }
		DB55 ABC 1 Bright A_JumpIf(WaterLevel > 1, "Nope");
	Move:		
		DB55 DEFGHIJKLMN 1 Bright A_JumpIf(WaterLevel > 1, "Nope");
		DB55 OPQRSTUVWXYZ 1 BrightA_JumpIf(WaterLevel > 1, "Nope");
		Stop;
	Death:
		TNT1 A 0 A_AreaOfEffect("FireAoE", 12);
		DB56 ABCDEFGHIJK 1 Bright
		{
			A_FadeOut(0.075);
			A_SetScale(Scale.X*1.075,Scale.Y*1.075);
			A_ChangeVelocity(0,0,0.25,CVF_RELATIVE);
			A_Splash(32, radius*2, XF_NOSPLASH);
			
			return A_JumpIf(WaterLevel > 1, "Nope");
		}
		Wait;
	Nope:
		TNT1 A 0;
		Stop;
	}
}

class BurnDOT : CustomDOT
{
	Default
	{
		DamageType "Fire";
		CustomDOT.EffectRate 4;
		CustomDOT.EffectActor "FlameEffect";
		Inventory.MaxAmount 7;
		DamageFunction 5;
		
		+PAINLESS
		+NOBLOOD
	}
}

class FlameEffect : DOTEffect
{
	Default
	{
		RenderStyle "Add";
		Alpha 0.4;
		Scale 0.2;
		
		+DOTEFFECT.NOWARP
	}
	
	States
	{
	Spawn:
		FLMS ABCDEFGHIJ 1 Bright;
		Stop;
	}
	
	override void Effect()
	{
		scale.x -= min(0.01, scale.x);
		scale.y -= min(0.01, scale.y);
	}
}

class FireAoE : AoE
{
	static const String noSpawn[] =
	{
		"FWATER1", "FWATER2", "FWATER3", "FWATER4",
		"BLOOD1", "BLOOD2", "BLOOD3"
	};
	
	Default
	{
		Radius 16;
		Height 24;
		DamageFunction 5;
		DamageType "Fire";
		
		AoE.DOTType "BurnDOT";
		AoE.EffectRate 4;
		AoE.EffectActor "GroundFireFlame";
		
		+PAINLESS
		+AOE.NOLIQUIDS
	}
	
	States
	{
	Spawn:
		TNT1 A 70;
		Stop;
	}
	
	override void BeginPlay()
	{
		super.BeginPlay();
		
		TextureID offLimits;
		for (int i = 0; i < noSpawn.Size(); ++i)
		{
			offLimits = TexMan.CheckForTexture(noSpawn[i], TexMan.Type_Flat);
			if (floorpic == offLimits)
			{
				Destroy();
				return;
			}
		}
	}
}

class GroundFireFlame : Actor
{
	Default
	{
		RenderStyle "Add";
		Alpha 0.4;
		Scale 0.3;
		
		+NOINTERACTION
	}
	
	States
	{
	Spawn:
		FLMS ABCDEFGHIJ 1 Bright;
		Stop;
	}
	
	override void Tick()
	{
		super.Tick();
		
		if (bDestroyed || IsFrozen())
			return;
		
		scale.x -= min(0.02, scale.x);
		scale.y -= min(0.02, scale.y);
	}
}
